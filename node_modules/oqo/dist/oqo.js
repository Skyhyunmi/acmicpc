"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OQO = void 0;
var OQO = /** @class */ (function () {
    function OQO() {
        this.selectList = [];
        this.objectList = [];
    }
    OQO.prototype.select = function (selectList) {
        this.selectList = selectList;
        return this;
    };
    OQO.prototype.from = function (object) {
        if (Array.isArray(object)) {
            // check if object array
            object.forEach(function (item) {
                if (typeof item !== 'object')
                    throw new Error('FROM clause needs an object or an array of objects!');
            });
            this.objectList = object;
        }
        else {
            // check if single object
            if (typeof object === 'object')
                this.objectList = [object];
            else
                throw new Error('FROM clause needs an object or an array of objects!');
        }
        return this;
    };
    OQO.prototype.where = function (condition) {
        // parse condition
        var splitCondition = condition.split(' ');
        if (splitCondition.length !== 3)
            throw new Error('WHERE clause needs to have two spaces!');
        var key = splitCondition[0];
        var operator = splitCondition[1];
        var operand = splitCondition[2];
        if (operator !== '>' && operator !== '>=' && operator !== '=' && operator !== '<' && operator !== '<=')
            throw new Error('WHERE clause needs to have the correct operator!');
        // create conditional statement
        var statement;
        switch (operator) {
            case '>':
                statement = function (item) { return isNaN(Number(item["" + key])) ?
                    item["" + key] > operand :
                    item["" + key] > Number(operand); };
                break;
            case '>=':
                statement = function (item) { return isNaN(Number(item["" + key])) ?
                    item["" + key] >= operand :
                    item["" + key] >= Number(operand); };
                break;
            case '=':
                statement = function (item) { return isNaN(Number(item["" + key])) ?
                    item["" + key] === operand :
                    item["" + key] === Number(operand); };
                break;
            case '<':
                statement = function (item) { return isNaN(Number(item["" + key])) ?
                    item["" + key] < operand :
                    item["" + key] < Number(operand); };
                break;
            case '<=':
                statement = function (item) { return isNaN(Number(item["" + key])) ?
                    item["" + key] <= operand :
                    item["" + key] <= Number(operand); };
                break;
        }
        // filter objects
        var objectList = [];
        this.objectList.forEach(function (item) {
            if (statement(item))
                objectList.push(item);
        });
        this.objectList = objectList;
        return this;
    };
    OQO.prototype.order = function (key, type) {
        if (type !== 'asc' && type !== 'desc')
            throw new Error('ORDER clause needs to have the correct type!');
        var flip = type === 'asc' ? 1 : -1;
        var compare = function (a, b) {
            if (a["" + key] < b["" + key])
                return -1 * flip;
            else if (a["" + key] > b["" + key])
                return flip;
            else
                return 0;
        };
        this.objectList = this.objectList.sort(compare);
        return this;
    };
    OQO.prototype.run = function () {
        var _this = this;
        var objectList = [];
        // for all objects
        this.objectList.forEach(function (item) {
            var object = {};
            // filter selected keys
            _this.selectList.forEach(function (key) {
                object["" + key] = item["" + key];
            });
            objectList.push(object);
        });
        this.objectList = objectList;
        return this.objectList;
    };
    return OQO;
}());
exports.OQO = OQO;
